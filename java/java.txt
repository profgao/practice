20180831:
1. 运算符： 前缀自增自减法(++a,--a): 先进行自增或者自减运算，再进行表达式运算。
   当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。
2. 访问控制修饰符
    Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。

    default (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。
    private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）
    public : 对所有类可见。使用对象：类、接口、变量、方法
    protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。   
3. 非访问修饰符
    为了实现一些其他的功能，Java 也提供了许多非访问修饰符。
    static 修饰符，用来修饰类方法和类变量。
    final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。
    abstract 修饰符，用来创建抽象类和抽象方法。
    synchronized 和 volatile 修饰符，主要用于线程的编程。
4. Java语言支持的变量类型有：
    类变量：独立于方法之外的变量，用 static 修饰。类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。
    实例变量：独立于方法之外的变量，不过没有 static 修饰。
    局部变量：类的方法中的变量。

20180901:
1. 类型： byte(8bit), short(16), int(32), long(64), float(32), double, boolean, char(16)
   Character类是char类型的类，是16bit，
2. String类： 如果需要对字符串做很多修改，那么应该选择使用 StringBuffer & StringBuilder 类
    方法： String.length()，string1.concat(string2)
    由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。
    String 是被 final 修饰的，他的长度是不可变的，就算调用 String 的 concat 方法，那也是把字符串拼接起来并重新创建一个对象，把拼接后的 String 的值赋给新创建的对象，而 StringBuffer 的长度是可变的
3. 数组： double[] myList; double[] myList = new double[size];

20180903:
1. 正则表达式：
    Java 源代码的字符串中的反斜线被解释为 Unicode 转义或其他字符转义。因此必须在字符串字面值中使用两个反斜线，表示正则表达式受到保护，不被 Java 字节码编译器解释。例如，当解释为正则表达式时，字符串字面值 "\b" 与单个退格字符匹配，而 "\\b" 与单词边界匹配。字符串字面值 "\(hello\)" 是非法的，将导致编译时错误；要与字符串 (hello) 匹配，必须使用字符串字面值 "\\(hello\\)"。
    
2.表示一位数字的正则表达式是 \\d，而表示一个普通的反斜杠是 \\\\。
3. 捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：
    ((A)(B(C)))
    (A)
    (B(C))
    (C)
20180905:
1. 方法：方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。test<MethodUnderTest>_<state>
2.  在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。
3. Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。

4. Java 流(Stream)、文件(File)和IO, Scanner 类
5. 异常发生的原因有很多，通常包含以下几大类：
    用户输入了非法数据。
    要打开的文件不存在。
    网络通信时连接中断，或者JVM内存溢出。
    
    所有的异常类是从 java.lang.Exception 类继承的子类。
6. 要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：
    检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。
    运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。
    错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。
7. Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。Error 用来指示运行时环境发生的错误。例如，JVM 内存溢出。一般地，程序不会从错误中恢复。
8. 异常类有两个主要的子类：IOException 类和 RuntimeException 类。
9. 在 Java 内置类中，有大部分常用检查性和非检查性异常。
10. 在Java中定义了两种类型的异常和错误。貌似都属于非检查性异常
    JVM(Java虚拟机) 异常：由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。
    程序级异常：由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。
    
20180909:
1. Java 继承:
   使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。
   super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。
   final 关键字声明类可以把类定义为不能继承的，即最终类；或者用于修饰方法，该方法不能被子类重写
   子类不能继承父类的构造器（构造方法或者构造函数），如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super关键字调用父类的构造器并配以适当的参数列表。如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器
2.重写(Override)
   重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！
3. 重载
   重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。
   被重载的方法必须改变参数列表(参数个数或类型不一样)；
   被重载的方法可以改变返回类型；
    被重载的方法可以改变访问修饰符；
    被重载的方法可以声明新的或更广的检查异常；
    方法能够在同一个类中或者在一个子类中被重载。
    无法以返回值类型作为重载函数的区分标准
4. 在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。
   由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类
   * 抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。
   * 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。
   * 抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。
   * 构造方法，类方法（用static修饰的方法）不能声明为抽象方法。
   * 抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。
5. 接口：
    接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。
    接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。
    接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象
    接口与类的区别：
        接口不能用于实例化对象。
        接口没有构造方法。
        接口中所有的方法必须是抽象方法。
        接口不能包含成员变量，除了 static 和 final 变量。
        接口不是被类继承了，而是要被类实现。
        接口支持多继承
    抽象类和接口的区别
        1. 抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。
        2. 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。
        3. 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。
        4. 一个类只能继承一个抽象类，而一个类却可以实现多个接口
    接口声明：
    [可见度] interface 接口名称 [extends 其他的接口名名] {
    接口实现：
    ...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...
    
    重写接口中声明的方法时，需要注意以下规则：
        类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。
        类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。
        如果实现接口的类是抽象类，那么就没必要实现该接口的方法。
6. 包Package：
   package pkg1[．pkg2[．pkg3…]];
    通常使用小写的字母来命名避免与类、接口名字的冲突   同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突
    通常，一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是 runoob.com，所有的包名都以 com.runoob 开头。
20180910:
1. 在Java中的数据结构主要包括以下几种接口和类：
    枚举（Enumeration）,位集合（BitSet）,向量（Vector）,栈（Stack）,字典（Dictionary）,哈希表（Hashtable）,属性（Properties）
2. 集合框架被设计成要满足以下几个目标。
  * 该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。
  * 该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。
  * 对一个集合的扩展和适应必须是简单的。
  * List接口是一个有序的 Collection，List 接口存储一组不唯一，有序（插入顺序）的对象
  * Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。 Set接口存储一组唯一，无序的对象。
  * 任何对象加入集合类后，自动转变为Object类型，所以在取出的时候，需要进行强制类型转换。
  * 综合比较在只遍历 key 的时候使用 keySet(), 在只遍历 value 的是使用 values() 方法, 在遍历 key-value 的时候使用 entrySet() 是比较合理的选择。如果遍历 hashMap() 时 entrySet() 方法是将 key 和 value 全部取出来,所以性能开销是可以预计的, 而 keySet() 方法进行遍历的时候是根据取出的 key 值去查询对应的 value 值, 所以如果 key 值是比较简单的结构(如 1,2,3...)的话性能消耗上是比 entrySet() 方法低, 但随着 key 值得复杂度提高 entrySet() 的优势就会显露出来
3. Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。
泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数
    <? extends T>和<? super T>的区别
    <? extends T>表示该通配符所代表的类型是T类型的子类。
    <? super T>表示该通配符所代表的类型是T类型的父类。
20180911:
1. 关于序列化，常又称为持久化，将其写入磁盘中。
    进而对于编码规则来说：
    任一一个实体类必须要去实现 Serializable 接口，方便以后将该类持久化，或者将其用于转为字节数组，用于网络传输。
    对于一个实体类，不想将所有的属性都进行序列化，有专门的关键字 transient
2. Java URL处理,URL（Uniform Resource Locator）中文名为统一资源定位符，有时也被俗称为网页地址。 
    protocol://host:port/path?query#fragment

3.Java 网络编程